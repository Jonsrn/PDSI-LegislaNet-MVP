const { Server } = require("socket.io");
const { supabaseAdmin } = require("../config/supabase");
const createLogger = require("../config/logger");

const logger = createLogger("WEBSOCKET_SERVICE");

class WebSocketService {
  constructor() {
    this.io = null;
    this.connectedUsers = new Map(); // userId -> { socketId, camaraId, role, isPresidente }
    this.camaraRooms = new Map(); // camaraId -> Set(socketIds)
    this.pautaRooms = new Map(); // pautaId -> Set(socketIds)
  }

  /**
   * Inicializa o servidor WebSocket
   */
  initialize(server) {
    this.io = new Server(server, {
      cors: {
        origin: true,
        credentials: true,
        methods: ["GET", "POST"],
      },
      transports: ["websocket", "polling"],
      pingTimeout: 5000, // Ultra r√°pido: 5s
      pingInterval: 2000, // Ultra r√°pido: 2s
      upgradeTimeout: 2000, // Timeout ultra r√°pido para upgrade
      allowEIO3: true, // Compatibilidade
      compression: false, // Desabilitar compress√£o para velocidade
      perMessageDeflate: false, // Desabilitar deflate para lat√™ncia menor
      httpCompression: false, // Sem compress√£o HTTP
    });

    this.setupMiddleware();
    this.setupConnectionHandlers();

    logger.info("üöÄ WebSocket servidor inicializado com sucesso");
  }

  /**
   * Decodifica o payload de um token JWT (igual ao middleware HTTP)
   */
  decodeJwtPayload(token) {
    try {
      const payloadBase64 = token.split(".")[1];
      const decodedJson = Buffer.from(payloadBase64, "base64").toString();
      return JSON.parse(decodedJson);
    } catch (error) {
      logger.error("Erro ao decodificar o payload do JWT:", {
        error: error.message,
      });
      return null;
    }
  }

  /**
   * Configura middleware de autentica√ß√£o
   */
  setupMiddleware() {
    this.io.use(async (socket, next) => {
      try {
        const token =
          socket.handshake.auth.token ||
          socket.handshake.headers.authorization?.replace("Bearer ", "");

        // Verificar se √© conex√£o p√∫blica (sem token)
        if (!token) {
          // Permitir conex√£o p√∫blica para visualiza√ß√£o
          socket.isPublic = true;
          logger.info(
            "üåê [WebSocket] Conex√£o p√∫blica permitida para visualiza√ß√£o"
          );
          next();
          return;
        }

        logger.info("üîê [WebSocket] Iniciando verifica√ß√£o de autentica√ß√£o...");
        logger.info(
          `üîê [WebSocket] Token recebido: ${token.substring(0, 20)}...`
        );

        // Verificar token no Supabase (igual ao middleware HTTP)
        const {
          data: { user },
          error: userError,
        } = await supabaseAdmin.auth.getUser(token);
        if (userError || !user) {
          logger.error("‚ùå [WebSocket] Token inv√°lido ou expirado:", {
            error: userError?.message,
          });
          throw new Error("Token inv√°lido ou expirado");
        }

        logger.info(
          `‚úÖ [WebSocket] Usu√°rio ${user.id} (${user.email}) autenticado com sucesso`
        );

        // Buscar perfil do usu√°rio (igual ao middleware HTTP)
        const { data: profile, error: profileError } = await supabaseAdmin
          .from("profiles")
          .select("role, camara_id, min_token_iat, nome")
          .eq("id", user.id)
          .single();

        if (profileError || !profile) {
          logger.error(
            `‚ùå [WebSocket] Perfil n√£o encontrado para o usu√°rio ${user.id}:`,
            { error: profileError?.message }
          );
          throw new Error("Perfil de usu√°rio n√£o encontrado");
        }

        logger.info(
          `üìã [WebSocket] Perfil encontrado. Role: '${profile.role}', C√¢mara: ${profile.camara_id}`
        );

        // Verificar se √© vereador
        if (profile.role !== "vereador") {
          logger.error(
            `‚ùå [WebSocket] Acesso negado. Role '${profile.role}' n√£o permitida`
          );
          throw new Error("Acesso restrito a vereadores");
        }

        // Verificar sess√£o √∫nica (IAT) - igual ao middleware HTTP
        const tokenPayload = this.decodeJwtPayload(token);
        const iatDoToken = tokenPayload ? tokenPayload.iat : null;
        const iatMinimoDoPerfil = profile.min_token_iat;

        logger.info(
          `üîê [WebSocket] Comparando IATs. Token IAT: ${iatDoToken}, Perfil IAT M√≠nimo: ${iatMinimoDoPerfil}`
        );

        if (!tokenPayload || tokenPayload.iat < profile.min_token_iat) {
          logger.warn(
            `‚ùå [WebSocket] Token antigo detectado. IAT: ${tokenPayload?.iat}, IAT m√≠nimo: ${profile.min_token_iat}`
          );
          throw new Error("Sess√£o expirada. Fa√ßa login novamente");
        }

        // Buscar dados completos do vereador
        const { data: vereadorData, error: vereadorError } = await supabaseAdmin
          .from("vereadores")
          .select(
            "id, nome_parlamentar, camara_id, is_presidente, is_vice_presidente, partido_id"
          )
          .eq("profile_id", user.id)
          .single();

        if (vereadorError || !vereadorData) {
          logger.error(
            `‚ùå [WebSocket] Dados do vereador n√£o encontrados para ${user.id}:`,
            { error: vereadorError?.message }
          );
          throw new Error("Dados do vereador n√£o encontrados");
        }

        // Anexar dados do usu√°rio ao socket
        socket.userId = user.id;
        socket.userEmail = user.email;
        socket.profile = profile;
        socket.vereadorData = vereadorData;
        socket.camaraId = vereadorData.camara_id;
        socket.isPresidente = vereadorData.is_presidente;

        logger.info(
          `‚úÖ [WebSocket] Acesso autorizado para vereador ${vereadorData.nome_parlamentar} da c√¢mara ${vereadorData.camara_id}`
        );
        next();
      } catch (error) {
        logger.warn(`‚ùå [WebSocket] Falha na autentica√ß√£o: ${error.message}`);
        next(new Error("Falha na autentica√ß√£o"));
      }
    });
  }

  /**
   * Configura handlers de conex√£o
   */
  setupConnectionHandlers() {
    this.io.on("connection", (socket) => {
      this.handleConnection(socket);

      socket.on("disconnect", () => {
        this.handleDisconnection(socket);
      });

      socket.on("join-pauta", (pautaId) => {
        this.handleJoinPauta(socket, pautaId);
      });

      socket.on("leave-pauta", (pautaId) => {
        this.handleLeavePauta(socket, pautaId);
      });

      // Eventos de ping/pong para monitoramento de conex√£o
      socket.on("ping", () => {
        socket.emit("pong");
      });
    });
  }

  /**
   * Handle nova conex√£o
   */
  handleConnection(socket) {
    // Verificar se √© conex√£o p√∫blica
    if (socket.isPublic) {
      logger.info(`üåê Usu√°rio p√∫blico conectado: Socket ID ${socket.id}`);

      // Enviar status de conex√£o p√∫blica
      socket.emit("connection-status", {
        connected: true,
        isPublic: true,
        timestamp: new Date().toISOString(),
      });
      return;
    }

    const userInfo = {
      socketId: socket.id,
      camaraId: socket.camaraId,
      role: "vereador",
      isPresidente: socket.isPresidente,
      connectedAt: new Date().toISOString(),
    };

    // Armazenar usu√°rio conectado
    this.connectedUsers.set(socket.userId, userInfo);

    // Adicionar √† room da c√¢mara
    const camaraRoom = `camara_${socket.camaraId}`;
    socket.join(camaraRoom);

    // Manter track das rooms da c√¢mara
    if (!this.camaraRooms.has(socket.camaraId)) {
      this.camaraRooms.set(socket.camaraId, new Set());
    }
    this.camaraRooms.get(socket.camaraId).add(socket.id);

    logger.info(
      `üë§ Vereador conectado: ${socket.userEmail} (ID: ${socket.userId}, C√¢mara: ${socket.camaraId})`
    );
    logger.info(
      `üìä Usu√°rios conectados na C√¢mara ${socket.camaraId}: ${
        this.camaraRooms.get(socket.camaraId).size
      }`
    );

    // Notificar outros vereadores da mesma c√¢mara sobre a conex√£o
    socket.to(camaraRoom).emit("vereador-connected", {
      vereadorId: socket.userId,
      nomeVereador: socket.vereadorData.nome_parlamentar,
      isPresidente: socket.isPresidente,
      timestamp: new Date().toISOString(),
    });

    // Enviar status de conex√£o para o usu√°rio
    socket.emit("connection-status", {
      connected: true,
      camaraId: socket.camaraId,
      connectedUsers: this.camaraRooms.get(socket.camaraId).size,
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * Handle desconex√£o
   */
  handleDisconnection(socket) {
    const userInfo = this.connectedUsers.get(socket.userId);

    if (userInfo) {
      // Remover da room da c√¢mara
      const camaraRoom = `camara_${socket.camaraId}`;

      if (this.camaraRooms.has(socket.camaraId)) {
        this.camaraRooms.get(socket.camaraId).delete(socket.id);

        // Se n√£o h√° mais usu√°rios desta c√¢mara, remover o mapa
        if (this.camaraRooms.get(socket.camaraId).size === 0) {
          this.camaraRooms.delete(socket.camaraId);
        }
      }

      // Remover das rooms de pautas
      this.pautaRooms.forEach((sockets, pautaId) => {
        sockets.delete(socket.id);
        if (sockets.size === 0) {
          this.pautaRooms.delete(pautaId);
        }
      });

      // Remover usu√°rio conectado
      this.connectedUsers.delete(socket.userId);

      logger.info(
        `üëã Vereador desconectado: ${socket.userEmail} (ID: ${socket.userId})`
      );

      // Notificar outros vereadores da mesma c√¢mara sobre a desconex√£o
      socket.to(camaraRoom).emit("vereador-disconnected", {
        vereadorId: socket.userId,
        nomeVereador: socket.vereadorData?.nome_parlamentar,
        timestamp: new Date().toISOString(),
      });
    }
  }

  /**
   * Handle entrada em room de pauta
   */
  async handleJoinPauta(socket, pautaId) {
    try {
      // Verificar se a pauta pertence √† c√¢mara do vereador
      const { data: pauta, error } = await supabaseAdmin
        .from("pautas")
        .select("id, nome, sessoes!inner(camara_id)")
        .eq("id", pautaId)
        .single();

      if (error || !pauta) {
        socket.emit("error", { message: "Pauta n√£o encontrada" });
        return;
      }

      if (pauta.sessoes.camara_id !== socket.camaraId) {
        socket.emit("error", {
          message: "Acesso negado - pauta de outra c√¢mara",
        });
        return;
      }

      // Entrar na room da pauta
      const pautaRoom = `pauta_${pautaId}`;
      socket.join(pautaRoom);

      // Manter track das rooms de pauta
      if (!this.pautaRooms.has(pautaId)) {
        this.pautaRooms.set(pautaId, new Set());
      }
      this.pautaRooms.get(pautaId).add(socket.id);

      logger.info(`üìã Vereador ${socket.userEmail} entrou na pauta ${pautaId}`);

      socket.emit("pauta-joined", {
        pautaId,
        pautaNome: pauta.nome,
        timestamp: new Date().toISOString(),
      });

      // Enviar estat√≠sticas atuais da pauta
      this.sendPautaStats(pautaId);
    } catch (error) {
      logger.error(`Erro ao entrar na pauta ${pautaId}:`, error);
      socket.emit("error", { message: "Erro ao entrar na pauta" });
    }
  }

  /**
   * Handle sa√≠da da room de pauta
   */
  handleLeavePauta(socket, pautaId) {
    const pautaRoom = `pauta_${pautaId}`;
    socket.leave(pautaRoom);

    if (this.pautaRooms.has(pautaId)) {
      this.pautaRooms.get(pautaId).delete(socket.id);

      if (this.pautaRooms.get(pautaId).size === 0) {
        this.pautaRooms.delete(pautaId);
      }
    }

    logger.info(`üìã Vereador ${socket.userEmail} saiu da pauta ${pautaId}`);

    socket.emit("pauta-left", {
      pautaId,
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * Handle solicita√ß√£o de estat√≠sticas
   */
  async handleRequestStats(socket, pautaId) {
    try {
      await this.sendPautaStatsToSocket(socket, pautaId);
    } catch (error) {
      logger.error(`Erro ao buscar estat√≠sticas para pauta ${pautaId}:`, error);
      socket.emit("error", { message: "Erro ao buscar estat√≠sticas" });
    }
  }

  /**
   * Notifica sobre novo voto
   */
  async notifyVoto(pautaId, votoData) {
    try {
      const { vereador, voto, isUpdate } = votoData;

      logger.info(
        `üó≥Ô∏è Notificando voto: ${vereador.nome_parlamentar} votou ${voto} na pauta ${pautaId}`
      );

      // Buscar dados da pauta para verificar c√¢mara
      const { data: pauta, error } = await supabaseAdmin
        .from("pautas")
        .select("sessoes!inner(camara_id)")
        .eq("id", pautaId)
        .single();

      if (error || !pauta) {
        logger.warn(`Pauta ${pautaId} n√£o encontrada para notifica√ß√£o`);
        return;
      }

      const camaraId = pauta.sessoes.camara_id;
      const camaraRoom = `camara_${camaraId}`;
      const pautaRoom = `pauta_${pautaId}`;

      // Preparar dados da notifica√ß√£o
      const notification = {
        type: "voto-registrado",
        pautaId: pautaId, // Garantir que pautaId est√° sempre presente
        vereador: {
          id: vereador.id,
          nome: vereador.nome_parlamentar,
          isPresidente: vereador.is_presidente,
        },
        voto,
        isUpdate,
        timestamp: new Date().toISOString(),
      };

      // Enviar notifica√ß√£o imediata para todos os vereadores da c√¢mara
      // (A filtragem por pauta ser√° feita no lado cliente)
      this.io.to(camaraRoom).emit("voto-notification", notification);

      // Notificar servidor global (porta 3000) para retransmitir o voto
      const http = require("http");
      const votoPayload = JSON.stringify({
        pautaId,
        voto,
        isUpdate,
        vereadorNome: vereador.nome_parlamentar,
        camaraId: camaraId, // ‚úÖ Incluir camaraId para notificar TVs
      });

      const options = {
        hostname: "localhost",
        port: 3000,
        path: "/api/votacao-ao-vivo/notify-voto",
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Content-Length": Buffer.byteLength(votoPayload),
        },
      };

      const request = http.request(options, (response) => {
        if (response.statusCode >= 200 && response.statusCode < 300) {
          logger.info(
            `‚úÖ Voto retransmitido para servidor global (porta 3000)`
          );
        }
      });

      request.on("error", (error) => {
        logger.warn(
          `‚ö†Ô∏è Erro ao notificar servidor global sobre voto: ${error.message}`
        );
      });

      request.write(votoPayload);
      request.end();

      // Atualizar estat√≠sticas em tempo real (sem await para velocidade)
      this.sendPautaStats(pautaId).catch((err) => {
        logger.error("Erro ao enviar estat√≠sticas:", err);
      });

      // Atualizar estat√≠sticas p√∫blicas em tempo real
      this.sendPautaStatsToPublicRoom(pautaId).catch((err) => {
        logger.error("Erro ao enviar estat√≠sticas p√∫blicas:", err);
      });

      logger.info(`‚úÖ Notifica√ß√£o de voto enviada para C√¢mara ${camaraId}`);
    } catch (error) {
      logger.error("Erro ao notificar voto:", error);
    }
  }

  /**
   * Envia estat√≠sticas da pauta para room espec√≠fica
   */
  async sendPautaStats(pautaId) {
    try {
      const stats = await this.fetchPautaStats(pautaId);
      const pautaRoom = `pauta_${pautaId}`;

      this.io.to(pautaRoom).emit("pauta-stats-update", {
        pautaId,
        estatisticas: stats,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      logger.error(`Erro ao enviar estat√≠sticas da pauta ${pautaId}:`, error);
    }
  }

  /**
   * Envia estat√≠sticas da pauta para socket espec√≠fico
   */
  async sendPautaStatsToSocket(socket, pautaId) {
    try {
      const stats = await this.fetchPautaStats(pautaId);

      socket.emit("pauta-stats-update", {
        pautaId,
        estatisticas: stats,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      logger.error(
        `Erro ao enviar estat√≠sticas da pauta ${pautaId} para socket:`,
        error
      );
    }
  }

  /**
   * Busca estat√≠sticas da pauta no banco
   */
  async fetchPautaStats(pautaId) {
    const { data: votos, error } = await supabaseAdmin
      .from("votos")
      .select("voto")
      .eq("pauta_id", pautaId);

    if (error) {
      throw error;
    }

    return {
      total: votos.length,
      sim: votos.filter((v) => v.voto === "SIM").length,
      nao: votos.filter((v) => v.voto === "N√ÉO").length,
      abstencao: votos.filter((v) => v.voto === "ABSTEN√á√ÉO").length,
    };
  }

  /**
   * Envia estat√≠sticas da pauta para o servidor p√∫blico/global (porta 3000)
   * para que o portal p√∫blico possa receber atualiza√ß√µes em tempo real.
   */
  async sendPautaStatsToPublicRoom(pautaId) {
    try {
      const stats = await this.fetchPautaStats(pautaId);

      const http = require("http");
      const payload = JSON.stringify({ pautaId, estatisticas: stats });

      const options = {
        hostname: "localhost",
        port: 3000,
        path: "/api/votacao-ao-vivo/notify-stats",
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Content-Length": Buffer.byteLength(payload),
        },
        timeout: 3000,
      };

      const req = http.request(options, (res) => {
        if (res.statusCode >= 200 && res.statusCode < 300) {
          logger.info(
            `‚úÖ Estat√≠sticas da pauta ${pautaId} enviadas ao servidor p√∫blico`
          );
        } else {
          logger.warn(
            `‚ö†Ô∏è Falha ao enviar estat√≠sticas p√∫blicas (status ${res.statusCode})`
          );
        }
      });

      req.on("error", (err) => {
        logger.warn(
          `‚ö†Ô∏è Erro ao notificar servidor p√∫blico sobre estat√≠sticas: ${err.message}`
        );
      });

      req.write(payload);
      req.end();
    } catch (error) {
      logger.error(
        `Erro em sendPautaStatsToPublicRoom para pauta ${pautaId}:`,
        error
      );
      throw error;
    }
  }

  /**
   * Notifica mudan√ßa de status da pauta
   */
  async notifyPautaStatusChange(pautaId, newStatus, resultado = null) {
    try {
      logger.info(
        `üì¢ Notificando mudan√ßa de status da pauta ${pautaId}: ${newStatus}`
      );

      // Buscar dados da pauta
      const { data: pauta, error } = await supabaseAdmin
        .from("pautas")
        .select(
          `
                    id,
                    nome,
                    status,
                    resultado_votacao,
                    sessoes!inner(camara_id)
                `
        )
        .eq("id", pautaId)
        .single();

      if (error || !pauta) {
        logger.warn(
          `Pauta ${pautaId} n√£o encontrada para notifica√ß√£o de status`
        );
        return;
      }

      const camaraId = pauta.sessoes.camara_id;
      const camaraRoom = `camara_${camaraId}`;
      const pautaRoom = `pauta_${pautaId}`;

      const notification = {
        type: "pauta-status-changed",
        pautaId,
        pautaNome: pauta.nome,
        oldStatus: pauta.status,
        newStatus,
        resultado,
        timestamp: new Date().toISOString(),
      };

      // Enviar para todos da c√¢mara
      this.io.to(camaraRoom).emit("pauta-status-notification", notification);

      // Enviar para visualizadores da pauta
      this.io.to(pautaRoom).emit("pauta-status-update", notification);

      logger.info(
        `‚úÖ Notifica√ß√£o de mudan√ßa de status enviada para C√¢mara ${camaraId}`
      );
    } catch (error) {
      logger.error("Erro ao notificar mudan√ßa de status da pauta:", error);
    }
  }

  /**
   * Obter estat√≠sticas de conex√£o
   */
  getConnectionStats() {
    const stats = {
      totalConnections: this.connectedUsers.size,
      camaraConnections: {},
      activePautas: this.pautaRooms.size,
    };

    this.camaraRooms.forEach((sockets, camaraId) => {
      stats.camaraConnections[camaraId] = sockets.size;
    });

    return stats;
  }

  /**
   * Broadcast para toda a aplica√ß√£o (uso administrativo)
   */
  broadcastToAll(event, data) {
    this.io.emit(event, {
      ...data,
      timestamp: new Date().toISOString(),
    });

    logger.info(`üì¢ Broadcast global enviado: ${event}`);
  }

  /**
   * Broadcast para c√¢mara espec√≠fica
   */
  broadcastToCamara(camaraId, event, data) {
    const camaraRoom = `camara_${camaraId}`;

    this.io.to(camaraRoom).emit(event, {
      ...data,
      timestamp: new Date().toISOString(),
    });

    logger.info(`üì¢ Broadcast para C√¢mara ${camaraId}: ${event}`);
  }

  /**
   * Notifica in√≠cio de vota√ß√£o - abre tela de vota√ß√£o no app dos vereadores
   */
  notifyIniciarVotacao(camaraId, pautaId, pautaNome) {
    const camaraRoom = `camara_${camaraId}`;

    const notification = {
      type: "iniciar-votacao",
      pautaId,
      pautaNome,
      action: "open-voting-screen",
      timestamp: new Date().toISOString(),
    };

    // Emitir para todos os vereadores da c√¢mara
    this.io.to(camaraRoom).emit("iniciar-votacao", notification);

    // Contar APENAS vereadores autenticados (APKs), n√£o portais p√∫blicos
    const room = this.io.sockets.adapter.rooms.get(camaraRoom);
    let vereadoresOnline = 0;

    if (room) {
      // Iterar pelos sockets na sala e contar apenas vereadores
      room.forEach((socketId) => {
        const socket = this.io.sockets.sockets.get(socketId);
        // Contar apenas se N√ÉO for p√∫blico (ou seja, √© vereador autenticado)
        if (socket && !socket.isPublic && socket.vereadorData) {
          vereadoresOnline++;
        }
      });
    }

    logger.info(
      `üó≥Ô∏è Notifica√ß√£o de in√≠cio de vota√ß√£o enviada para C√¢mara ${camaraId} - Pauta: ${pautaNome} - Vereadores online: ${vereadoresOnline} (de ${
        room ? room.size : 0
      } conex√µes totais)`
    );

    // Retornar n√∫mero de vereadores online para uso no servidor
    return vereadoresOnline;
  }

  /**
   * Notifica encerramento de vota√ß√£o
   */
  notifyEncerrarVotacao(camaraId, pautaId, pautaNome, resultado) {
    const camaraRoom = `camara_${camaraId}`;

    const notification = {
      type: "encerrar-votacao",
      pautaId,
      pautaNome,
      resultado,
      action: "return-to-dashboard",
      timestamp: new Date().toISOString(),
    };

    this.io.to(camaraRoom).emit("encerrar-votacao", notification);

    logger.info(
      `üèÅ Notifica√ß√£o de encerramento de vota√ß√£o enviada para C√¢mara ${camaraId} - Pauta: ${pautaNome} - Resultado: ${resultado}`
    );
  }

  /**
   * Notifica in√≠cio de fala de orador
   */
  notifyIniciarFala(camaraId, oradorId, oradorNome, sessaoNome, tempoFala) {
    const camaraRoom = `camara_${camaraId}`;

    const notification = {
      type: "iniciar-fala",
      oradorId,
      oradorNome,
      sessaoNome,
      tempoFala,
      timestamp: new Date().toISOString(),
    };

    this.io.to(camaraRoom).emit("iniciar-fala", notification);

    logger.info(
      `üé§ Notifica√ß√£o de in√≠cio de fala enviada para C√¢mara ${camaraId} - Orador: ${oradorNome}`
    );
  }
}

module.exports = new WebSocketService();
